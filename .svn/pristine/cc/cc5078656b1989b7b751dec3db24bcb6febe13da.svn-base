# encoding: UTF-8

"""
简单双品种套利
"""
import datetime as dt
from datetime import datetime, time
import copy
import numpy as np

# cPickle序列化
import cPickle
import json
from ctaBase import *
from ctaTemplate2 import CtaTemplate2
from vtConstant import *
from ctaTask import CtaTask, CtaTaskResult


import pandas as pd
from pandas import Series, DataFrame
from statsmodels.tsa import stattools
import statsmodels.api as sm 

from business_calendar import Calendar
from vtFunction import todayDate

#--------------------------------------------------------------------------

def calc_spread_from_model(price_active, price_passive, usd_cnh, ols_beta):
    """按照回归模型计算价差，价差 = 国内黄金 - 回归预测(国外黄金的人民币价格)"""
    if price_active > 0 and price_passive > 0 and 6 < usd_cnh < 8 :
        price_active_adj = price_active * usd_cnh / 31.1034768
        try:
            price_passive_predicted = ols_beta['x'] * price_active_adj + ols_beta['intercept']
            return price_passive - price_passive_predicted
        except:
            pass
    else:
        raise ValueError(u'无效的参数')

def calc_spread(price_active, price_passive, usd_cnh):
    """计算价差， 以人民币计价， 价差 = 国内黄金-国外黄金*人民币汇率/31.1034768"""
    if price_active > 0 and price_passive > 0 and 6 < usd_cnh < 8: 
        return price_passive - price_active * usd_cnh / 31.1034768
    else:
        raise ValueError(u'无效的参数')

def ismarketopen():
    '''SHFE的au是否开市，CME开市时间覆盖SHFE，边界时间均离开交易所时间3s以保证下单安全'''
    invalid_sections = [(time(2,29,57), time(9,0,1)),
                       (time(10,14,57), time(10,30,1)),
                       (time(11,29,57), time(13,30,1)),
                       (time(14,59,57), time(21,0,1))]
    tmpTime = dt.datetime.now().time()
    for sec in invalid_sections:
        if tmpTime > sec[0] and tmpTime < sec[1]:
            return False
    return True

def take_snapshot(data, **kwargs):
    """开平仓前，记录策略中变量的快照， 返回一个字典，用于后续插入数据库"""
    # 线性回归模型的斜率和截距
    ols_beta = data['MyTask_result_data']['ols_beta']
    # 线性回归模型的 R2
    ols_R2 = data['MyTask_result_data']['ols_R2']
    # 真实价差的标准差
    spread_std = data['MyTask_result_data']['spread_std']
    # 开平仓标志
    open_close = 'unknown'
    # 做多或做空价差标志
    long_short = 'unknown'
    # 开平仓的品种
    vtSymbol = 'unknown'
    # 委托价
    order_price = -1
    # 委托手数
    order_volume = -1
    # 记录时的汇率
    usd_cnh = 0

    if 'vtSymbol' in kwargs:
        vtSymbol = kwargs['vtSymbol']
    if 'open_close' in kwargs:
        open_close = kwargs['open_close']
    if 'long_short' in kwargs:
        long_short = kwargs['long_short']
    if 'order_price' in kwargs:
        order_price = kwargs['order_price']
    if 'order_volume' in kwargs:
        order_volume = kwargs['order_volume']
    if 'usd_cnh' in kwargs:
        usd_cnh = kwargs['usd_cnh']

    snapshot = {'localtime':dt.datetime.now(),
                'vtSymbol': vtSymbol,
                'open_close': open_close,
                'direction': long_short,
                'order_price': order_price,
                'volume': order_volume,
                'usd_cnh': usd_cnh,
                'Stats': {'ols_beta': {'x':ols_beta['x'], 'intercept':ols_beta['intercept']}, 'ols_R2':ols_R2, 'spread_std':spread_std}}
    try:
        snapshot['lastTick_active'] = data['lastTick_active'].__dict__
        snapshot['lastTick_passive'] = data['lastTick_passive'].__dict__
    except:
        print 'lastTick not recorded'
    
    return snapshot




#------------------------------------------------------------------------
# 子状态基类
class NestedState:
    def __init__(self, strategy):
        self.strategy = strategy
        self.code = ''
    
    def new_state(self, newstate):
        self.__class__ = newstate
        self.onEnterState()

    def onEnterState(self):
        raise NotImplementedError
    
    def open_active(self):
        raise NotImplementedError
    
    def open_passive(self):
        raise NotImplementedError
    
    def close_active(self):
        raise NotImplementedError

    def close_passive(self):
        raise NotImplementedError
    
    def need_take_profit(self, spread):
        raise NotImplementedError

    def need_stop_loss(self, spread, spread_traded):
        raise NotImplementedError

#-------------------------------------------------------------------------
class UnknownState(NestedState):
    def onEnterState(self):
        pass
    
    def open_active(self):
        pass
    
    def open_passive(self):
        pass
    
    def close_active(self):
        pass

    def close_passive(self):
        pass
    
    def need_take_profit(self, spread):
        return False

    def need_stop_loss(self, spread, spread_traded):
        return False


#-------------------------------------------------------------------------
class LongSpreadState(NestedState):
    def onEnterState(self):
        print 'Enter Long Spread'
        self.code = 'b'

    def open_active(self):
        data = self.strategy.data
        # 做空国外黄金
        orderPrice = data['lastTick_active'].bidPrice1 +  10 * self.strategy.priceTick_active# - self.strategy.priceTick_active
        self.strategy.sendOrder(self.strategy.vtSymbol_active,
                                CTAORDER_SHORT,
                                orderPrice,
                                self.strategy.volume_active,
                                False, False, True)
        self.strategy.data['deposit_unfrozen'] = False

        snapshot = take_snapshot(data, 
                            vtSymbol=self.strategy.vtSymbol_active, 
                            open_close='open', 
                            long_short='long_spread', 
                            order_price=orderPrice,
                            order_volume=self.strategy.volume_active,
                            usd_cnh=self.strategy.usd_cnh)
        self.strategy.insertStrategyData(snapshot)

    def open_passive(self):
        data = self.strategy.data
        orderPrice = data['lastTick_passive'].upperLimit

        self.strategy.buy(self.strategy.vtSymbol_passive,
                    orderPrice,
                    self.strategy.volume_passive)

        snapshot = take_snapshot(data, 
                            open_close='open', 
                            long_short='long_spread', 
                            vtSymbol=self.strategy.vtSymbol_passive, 
                            order_price=orderPrice, 
                            order_volume=self.strategy.volume_passive,
                            usd_cnh=self.strategy.usd_cnh)

        self.strategy.insertStrategyData(snapshot)

    def close_active(self):
        data = self.strategy.data
        orderPrice = data['lastTick_active'].askPrice1 -10 * self.strategy.priceTick_active# + self.strategy.priceTick_active
        self.strategy.sendOrder(self.strategy.vtSymbol_active,
                                CTAORDER_COVER,
                                orderPrice,
                                self.strategy.volume_active,
                                False, False, True)
        self.strategy.data['deposit_unfrozen'] = False

        snapshot = take_snapshot(data, 
                            open_close='close', 
                            long_short='long_spread',  
                            vtSymbol=self.strategy.vtSymbol_active, 
                            order_price=orderPrice, 
                            order_volume=self.strategy.volume_active,
                            usd_cnh=self.strategy.usd_cnh)

        self.strategy.insertStrategyData(snapshot)

    def close_passive(self):
        data = self.strategy.data
        orderPrice = data['lastTick_passive'].lowerLimit

        self.strategy.sell(self.strategy.vtSymbol_passive,
                    orderPrice,
                    self.strategy.volume_passive)

        snapshot = take_snapshot(data, 
                            open_close='close', 
                            long_short='long_spread', 
                            vtSymbol=self.strategy.vtSymbol_passive, 
                            order_price=orderPrice,
                            order_volume=self.strategy.volume_passive,
                            usd_cnh=self.strategy.usd_cnh)

        self.strategy.insertStrategyData(snapshot)

    def need_take_profit(self, spread):
        return spread >= -1.0 * self.strategy.close_spread

    def need_stop_loss(self, spread, spread_traded):
        return spread <= spread_traded - self.strategy.stopLoss

#-------------------------------------------------------------------------
class ShortSpreadState(NestedState):
    def onEnterState(self):
        print 'Enter Short Spread'
        self.code = 'a'
    def open_active(self):
        data = self.strategy.data
        # 做多国外黄金
        orderPrice = data['lastTick_active'].askPrice1 -10 * self.strategy.priceTick_active#+ self.strategy.priceTick_active
        self.strategy.sendOrder(self.strategy.vtSymbol_active,
                                CTAORDER_BUY,
                                orderPrice,
                                self.strategy.volume_active,
                                False, False, True)
        self.strategy.data['deposit_unfrozen'] = False

        snapshot = take_snapshot(data, 
                            vtSymbol=self.strategy.vtSymbol_active, 
                            open_close='open', 
                            long_short='short_spread', 
                            order_price=orderPrice, 
                            order_volume=self.strategy.volume_active,
                            usd_cnh=self.strategy.usd_cnh)

        self.strategy.insertStrategyData(snapshot)

    def open_passive(self):
        data = self.strategy.data
        
        orderPrice = data['lastTick_passive'].lowerLimit

        self.strategy.short(self.strategy.vtSymbol_passive,
                    orderPrice,
                    self.strategy.volume_passive)

        snapshot = take_snapshot(data, 
                            open_close='open', 
                            long_short='short_spread', 
                            vtSymbol=self.strategy.vtSymbol_passive, 
                            order_price=orderPrice, 
                            order_volume=self.strategy.volume_passive,
                            usd_cnh=self.strategy.usd_cnh)
        self.strategy.insertStrategyData(snapshot)

    def close_active(self):
        data = self.strategy.data
        orderPrice = data['lastTick_active'].bidPrice1 + 10 * self.strategy.priceTick_active#- self.strategy.priceTick_active
        self.strategy.sendOrder(self.strategy.vtSymbol_active,
                                CTAORDER_SELL,
                                orderPrice,
                                self.strategy.volume_active,
                                False, False, True)
        self.strategy.data['deposit_unfrozen'] = False

        snapshot = take_snapshot(data, 
                            open_close='close', 
                            long_short='short_spread', 
                            vtSymbol=self.strategy.vtSymbol_active, 
                            order_price=orderPrice, 
                            order_volume=self.strategy.volume_active,
                            usd_cnh=self.strategy.usd_cnh)

        self.strategy.insertStrategyData(snapshot)

    def close_passive(self):
        data = self.strategy.data
        orderPrice = data['lastTick_passive'].upperLimit
        self.strategy.cover(self.strategy.vtSymbol_passive,
                    orderPrice,
                    self.strategy.volume_passive)

        snapshot = take_snapshot(data, 
                            open_close='close', 
                            long_short='short_spread', 
                            vtSymbol=self.strategy.vtSymbol_passive, 
                            order_price=orderPrice, 
                            order_volume=self.strategy.volume_passive,
                            usd_cnh=self.strategy.usd_cnh)

        self.strategy.insertStrategyData(snapshot)
    
    def need_take_profit(self, spread):
        return spread <= self.strategy.close_spread

    def need_stop_loss(self, spread, spread_traded):
        return spread >= spread_traded + self.strategy.stopLoss

# 以下为主状态
#-------------------------------------------------------------------------
# 主状态基类
class State:
    strategy = None
    last_state_class = None

    def __init__(self, strategy):
        self.strategy = strategy
        self.nested_state = NestedState(strategy)
        # 0
        self.__class__ = NotInitedState

    def new_state(self, newstate):
        self.__class__ = newstate
        self.onEnterState()

    def onEnterState(self):
        raise NotImplementedError
    
    def inState(self):
        raise NotImplementedError

#---------------------------------------------------------------------
#  0. 初始化状态
class NotInitedState(State):
    """打开程序后，从数据库载入历史数据，做初次分析的状态，完成后载入状态文件，切换到保存的状态"""
    def onEnterState(self):
        print 'Enter State 0'

    def inState(self):
        data = self.strategy.data
        print 'State 0', data['MyTask_inited']
        if data['MyTask_inited']:
            # 0 ---> 1
            self.new_state(NotTradableState)

    

#----------------------------------------------------------------------
#  1.不可交易状态
class NotTradableState(State):
    def load_state(self):
        try:
            with open(self.strategy.stateFileName, 'r') as f:
                d = cPickle.load(f)
                self.last_state_class = d['state_class']
                self.nested_state.new_state(d['nested_state_class'])
        except:
            self.last_state_class = None
            self.nested_state.new_state(UnknownState)
            self.strategy.writeCtaLog(u'状态文件不存在')

    def onEnterState(self):
        print 'Enter State 1'
        # 进入状态 1 即从文件读取保存的状态， 当开市条件满足就切换到保存的状态
        self.load_state()

    def inState(self):
        data = self.strategy.data
        print 'State 1'
        if data['lastTick_active'] != None and data['lastTick_passive'] != None and ismarketopen():
            if self.last_state_class == None:
                # 1 ---> 2
                self.new_state(TradableWaitState) 
            else:
                self.new_state(self.last_state_class)


# 2. 等待开仓
class TradableWaitState(State):
    def onEnterState(self):
        print 'Enter State 2'
        self.strategy.save_state(self, self.nested_state)

    def inState(self):
        if not ismarketopen():
            # 2 ---> 1
            self.new_state(NotTradableState)
            
        data = self.strategy.data
        # 重置策略变量
        data['tradePrice_active'] = 0
        data['tradePrice_passive'] = 0

        try:
            price_active = data['lastTick_active'].lastPrice
            price_passive = data['lastTick_passive'].lastPrice
            MyTask_result_data = data['MyTask_result_data']

            ols_beta = MyTask_result_data['ols_beta']
            # 价差标准差， 最低取值std_floor, 默认0.5
            spread_std = max(self.strategy.std_floor, MyTask_result_data['spread_std'])
            #spread_std = self.strategy.std_floor
            # 计算价差
            spread = calc_spread_from_model(price_active, price_passive, self.strategy.usd_cnh, ols_beta)
            print "State 2: spread = %.3f, std = %.2f, ape = %.1f / %.2f / %.4f" % (spread, spread_std, price_active, price_passive, self.strategy.usd_cnh)


            if spread >= spread_std * self.strategy.std_mult and self.strategy.data['deposit_unfrozen']: 
                # 开仓条件满足
                # 2 ---> 3
                # 做空价差
                self.nested_state.new_state(ShortSpreadState)
                self.new_state(OpenActiveState)
                
            elif spread <=  -1.0 * spread_std * self.strategy.std_mult and self.strategy.data['deposit_unfrozen']: 
                # 2 ---> 3
                # 做多价差
                self.nested_state.new_state(LongSpreadState)
                self.new_state(OpenActiveState)
                
        except AttributeError, e:
            # 2 ---> 16
            print "Exception in State 2", e
            #self.new_state(EndState)
        except ValueError, e:
            print "Exception in State 2", e
       

# 3. 主动腿开仓
class OpenActiveState(State):
    def onEnterState(self):
        print 'Enter State 3'
        self.nested_state.open_active()
        # 3 ---> 4
        self.new_state(ActiveOpeningState)

    def inState(self):
        pass


# 4.主动腿开仓中
class ActiveOpeningState(State):
    def onEnterState(self):
        print 'Enter State 4'
        self.strategy.save_state(self, self.nested_state)

    def inState(self):
        print '4'
        data = self.strategy.data
        if data[u'全部成交'] == True:
            # 4 ---> 5
            self.new_state(OpenPassiveState)
        elif data[u'委托失败'] == True:
            # 4 ---> 16
            self.new_state(EndState)
            #self.new_state(TradableWaitState)
        elif data[u'已撤销'] == True:
            # 4 ---> 2
            self.new_state(TradableWaitState)

# 5. 被动腿开仓
class OpenPassiveState(State):
    def onEnterState(self):
        print 'Enter State 5'
        self.nested_state.open_passive()
        # 5 ---> 6
        self.new_state(PassiveOpeningState)

    def inState(self):
        pass

# 6.被动腿开仓中
class PassiveOpeningState(State):
    def onEnterState(self):
        print 'Enter State 6'
        self.strategy.save_state(self, self.nested_state)

    def inState(self):
        data = self.strategy.data
        print '6'
        if data[u'委托失败'] == True:
            # 6 ---> 16
            self.new_state(EndState)
        elif data[u'全部成交'] == True:
            # 6 ---> 9
            self.new_state(WaitCloseState)
        


# 9. 等待平仓
class WaitCloseState(State):
    def onEnterState(self):
        print 'Enter State 9'
        self.strategy.save_state(self, self.nested_state)

    def inState(self):
        if not ismarketopen():
            # 9 ---> 1
            self.new_state(NotTradableState)

        data = self.strategy.data
        try:
            price_active = data['lastTick_active'].lastPrice
            price_passive = data['lastTick_passive'].lastPrice
            MyTask_result_data = data['MyTask_result_data']
            ols_beta = MyTask_result_data['ols_beta']
        except:
            return
        
        try:
            spread = calc_spread_from_model(price_active, price_passive, self.strategy.usd_cnh, ols_beta)
            spread_traded = calc_spread_from_model(data['tradePrice_active'], data['tradePrice_passive'], self.strategy.usd_cnh, ols_beta)
        except ValueError, e:
            self.strategy.writeCtaLog(':'.join(['ValueError in State 9:', str(e)]))
            return
        
        # 平仓条件满足
        print "9%s: spread n/t = %.3f / %.3f, ape = %.1f / %.2f / %.4f" % (self.nested_state.code, spread, spread_traded, price_active, price_passive, self.strategy.usd_cnh)

        if self.nested_state.need_take_profit(spread) and self.strategy.data['deposit_unfrozen']:
            # 9 ---> 10
            self.strategy.isstopwin = True #止盈
            self.new_state(CloseActiveState)            
        elif self.nested_state.need_stop_loss(spread, spread_traded) and self.strategy.data['deposit_unfrozen']:
            # 9 ---> 10
            self.strategy.isstopwin = False #止损
            self.new_state(CloseActiveState)

# 10. 主动腿平仓
class CloseActiveState(State):
    def onEnterState(self):
        print 'Enter State 10'
        self.nested_state.close_active()
        # 10 ---> 11
        self.new_state(ActiveClosingState)

    def inState(self):
        pass          

# 11. 主动腿平仓中
class ActiveClosingState(State):
    def onEnterState(self):
        print 'Enter State 11'
        self.strategy.save_state(self, self.nested_state)

    def inState(self):
        data = self.strategy.data
        print '11'
        if data[u'委托失败'] == True:
            # 11 ---> 16
            self.new_state(EndState)
            #self.new_state(WaitCloseState)
        elif data[u'全部成交'] == True:
            # 11 ---> 12
            self.new_state(ClosePassiveState)
        elif data[u'已撤销'] == True:
            # 11 ---> 9
            self.new_state(WaitCloseState)
       
# 12. 被动腿平仓
class ClosePassiveState(State):
    def onEnterState(self):
        print 'Enter State 12'
        self.nested_state.close_passive()
        # 12 ---> 13
        self.new_state(PassiveClosingState)

    def inState(self):
        pass

# 13. 被动腿平仓中
class PassiveClosingState(State):
    def onEnterState(self):
        print 'Enter State 13'
        self.strategy.save_state(self, self.nested_state)

    def inState(self):
        data = self.strategy.data
        print '13'
        if data[u'全部成交'] == True:
            # 13 ---> 2
            if self.strategy.isstopwin:
                self.new_state(TradableWaitState)
                self.nested_state.new_state(UnknownState)
            else:
                # 13 ---> 16
                self.new_state(EndState) 
        elif data[u'委托失败'] == True:
            # 13 ---> 16
            self.new_state(EndState)
            self.nested_state.new_state(UnknownState)

# 16. 失败后的终结状态
class EndState(State):
    def onEnterState(self):
        print 'Enter EndState'
        self.strategy.save_state(self, self.nested_state)
        
    def inState(self):
        print "EndState"



########################################################################
class MyTask(CtaTask):
    """载入Tick数据，重采样后统计分析"""
    # 是否已经第一次执行，第一次执行后inited=True
    inited = False
    # 保存分钟线
    df_1min_dict = {}
    # Pandas DataFrame, 用于数据对齐
    data = None

    def taskJob(self):
        t0 = dt.datetime.now()
        # 这里更换合约时要修改
        list_vtSymbols = self.strategy.vtSymbols #['au1712', 'GC1708.CME', 'USD_CNH.OANDA']
        # 返回的字典实例化
        task_result = CtaTaskResult()
        task_result.data['Exception'] = False
        task_result.task_name = 'MyTask'
        
        try:
            for vtSymbol in list_vtSymbols:
                # 更新时间
                cal = Calendar()
                now_time = dt.datetime.now()
                start_time = cal.addbusdays(now_time, -5)
                today_date = todayDate()
                # 开区间的处理，当前日期减去最小的timedelta分辨率
                end_time = today_date - dt.timedelta.resolution

                #where语句，用于剔除错误Tick
                where = """function(){
                    var t1 = Math.abs(this.datetime - this.localtime) > 60 * 1000;
                    var hour = this.datetime.getHours() - 8;
                    if(hour < 0) {
                        hour += 24;
                    }
                    var min = this.datetime.getMinutes();
                    var t2 = (hour == 2 && min >= 30) ||
                        (hour >= 3 && hour < 9) ||
                        (hour == 10 && min >= 15 && min < 30) ||
                        (hour == 11 && min >= 30) ||
                        (hour == 12) ||
                        (hour == 13 && min < 30) ||
                        (hour >= 15 && hour < 21);
                    return !(t1 || t2);
                }
                """
                # OA 时区转换
                if 'OANDA' in vtSymbol:
                        start_time = start_time - dt.timedelta(hours=8)
                        now_time = now_time - dt.timedelta(hours=8)
                        today_date = today_date - dt.timedelta(hours=8)
                        where = ''
                if not self.inited:
                    # 首次执行， 从数据库载入5天的原始数据
                    df = self.ctaEngine.loadTickToDataFrame(TICK_DB_NAME, vtSymbol, start_time, now_time, where)
                else:
                    # 再次执行， 从数据库载入当天的原始数据
                    df = self.ctaEngine.loadTickToDataFrame(TICK_DB_NAME, vtSymbol, today_date, now_time, where)
                
                if not df.empty:
                    df = df[['datetime', 'lastPrice']]
                    # 设为时间序列
                    df = df.set_index('datetime')
                    df.to_csv(vtSymbol+'.raw.csv')
                    # OANDA 时区处理
                    if "OANDA" in vtSymbol:
                        df= df.shift(8, freq='H')

                    # 重采样
                    df_1min = df.resample('1min').ohlc()[('lastPrice','close')]
                    # 释放df占用的内存
                    df = None
                    if "OANDA" in vtSymbol:
                        # 汇率数据更新不频繁，会有分钟线缺失的情况，采用前向插值补齐缺失数据
                        df_1min = df_1min.fillna(method='ffill')

                    if self.df_1min_dict.has_key(vtSymbol):
                        # 再次执行
                        try:
                            df_1min_yd = self.df_1min_dict[vtSymbol].ix[start_time : end_time]
                        except:
                            print vtSymbol, 'Exception in df.ix'
                            #self.df_1min_dict[vtSymbol].to_csv(vtSymbol+'.exception.csv')
                            continue
                        self.df_1min_dict[vtSymbol] = pd.concat([df_1min_yd, df_1min], axis=0)
                    else:
                        # 首次执行
                        self.df_1min_dict[vtSymbol] = df_1min
                else:
                    print vtSymbol, ': 0 recs for today.'
            
            # au1712
            df_domestic = self.df_1min_dict[list_vtSymbols[0]]
            # GC1708.CME
            df_foreign = self.df_1min_dict[list_vtSymbols[1]] * self.df_1min_dict[list_vtSymbols[2]] / 31.1034768
            # 两个时间序列存入同一个pandas DataFrame, 数据会按照时间自动对齐
            self.data = pd.concat([df_domestic, df_foreign], axis=1, join_axes=[df_domestic.index])
            # 丢弃缺失值
            self.data = self.data.dropna()
            self.data.to_csv('data.csv')
            # Cointegration
            #-----------------------------------------------------------------------
            # coint_t, pvalue, crit_value = sm.tsa.coint(data.ix[:,0],data.ix[:,1])

            # print '*'*50  
            # print coint_t, pvalue, crit_value
            # print '*'*50  

            # Linear Regression
            #-----------------------------------------------------------------------
            x = self.data.ix[:,1]
            y = self.data.ix[:,0]
            ols = pd.ols(y=y, x=x)
            print ols
            task_result.data['ols_beta'] = ols.beta
            task_result.data['ols_R2'] = ols.r2
            # spread standard deviation
            task_result.data['spread_std'] = (x-y).std()

        except Exception, e:
            print 'exception:', e
            task_result.data['Exception'] = True
            self.inited = False
            self.df_1min_dict = {}
            self.data = None
            print u"异常， 重设 Task"
        else:
            self.inited = True

        task_result.data['inited'] = self.inited
        print u"Task 耗时: %s" % str(dt.datetime.now()-t0)
        return task_result

########################################################################
class HedgeStrategy(CtaTemplate2):
    
    className = 'HedgeStrategy'
    author = u''
    #------------------------------------------------------------------------
    # 状态机
    state = None
    #------------------------------------------------------------------------
    # 策略参数
    # 标准差乘数
    std_mult = 1
    # 标准差的最小值，如果计算得出的标准差小于该值，就采用该值
    std_floor = 0.5
    stopLoss = 10        # 止损
    close_spread = 0.0     # 平仓价差
    volume_active = 1       # 主动腿手数
    volume_passive = 3     # 被动腿手数
    #------------------------------------------------------------------------
    # 策略变量
    lastTick_active = None  # 主动腿最新Tick价格
    lastTick_passive = None # 被动腿最新Tick价格
    vtSymbol_active = ''
    vtSymbol_passive = ''
    priceTick_active = 0
    priceTick_passive = 0

    isstopwin = True          # 表示平仓是已止盈结束，False表示止损结束
    
    tradePriceFilePrefix = './temp/tradePrice'
    tradePriceFileName = ''
    stateFilePrefix = './temp/state'
    stateFileName = ''
    # 保存传入状态机的各类数据的字典
    data = {}
    # 参数列表，保存了参数的名称
    paramList = ['name',
                 'className',
                 'author',
                 'vtSymbols',
                 'std_floor',
                 'std_mult',
                 'volume_active',
                 'volume_passive',
                 'stopLoss']

    #----------------------------------------------------------------------
    def __init__(self, ctaEngine, setting):
        """Constructor"""
        super(HedgeStrategy, self).__init__(ctaEngine, setting)
        self.state = None
        self.myTask = None
        self.tradePriceFileName = '.'.join([self.tradePriceFilePrefix, self.name])
        self.stateFileName = '.'.join([self.stateFilePrefix, self.name])
        self.data[u'全部成交'] = False 
        self.data[u'委托失败'] = False
        self.data[u'已撤销'] = False
        self.data['deposit_unfrozen'] = True

        self.data['lastTick_active'] = None
        self.data['lastTick_passive'] = None
        self.data['tradePrice_active'] = 0.0
        self.data['tradePrice_passive'] = 0.0
        self.data['MyTask_inited'] = False
        self.data['MyTask_result_data'] = {}
        
        # 载入上次成交价
        self.__readTradePrice__() 

        # 注意策略类中的可变对象属性（通常是list和dict等），在策略初始化时需要重新创建，
        # 否则会出现多个策略实例之间数据共享的情况，有可能导致潜在的策略逻辑错误风险，
        # 策略类中的这些可变对象属性可以选择不写，全都放在__init__下面，写主要是为了阅读
        # 策略时方便（更多是个编程习惯的选择）        

    #----------------------------------------------------------------------
    def __readTradePrice__(self):
        try:
            with open(self.tradePriceFileName, 'r') as f:
                d = json.load(f)
                self.data['tradePrice_active'] = d['tradePrice_active']
                self.data['tradePrice_passive'] = d['tradePrice_passive']
                self.writeCtaLog(u'导入上次成交价 %.2f, %.2f' % (self.data['tradePrice_active'], self.data['tradePrice_passive'])) 
        except:
            pass 

    #----------------------------------------------------------------------
    def reset_data(self):
        self.data[u'全部成交'] = False 
        self.data[u'委托失败'] = False
        self.data[u'已撤销'] = False
    #----------------------------------------------------------------------
    def onInit(self):
        """初始化策略（必须由用户继承实现）"""
        self.writeCtaLog(u'%s策略初始化' %self.name)

    #----------------------------------------------------------------------
    def onStart(self):
        """启动策略（必须由用户继承实现）"""
        # 状态机实例，单例模式
        self.state = State(self)
        # 添加 MyTask， 600秒执行一次
        self.myTask = MyTask(self, 600)
        self.myTask.start()
        self.vtSymbol_active = self.vtSymbols[1]
        self.vtSymbol_passive = self.vtSymbols[0]
        self.priceTick_active = self.getPriceTick(self.vtSymbol_active)
        self.priceTick_passive = self.getPriceTick(self.vtSymbol_passive)

        self.writeCtaLog(u'%s策略启动' %self.name)
        self.putEvent()
    #----------------------------------------------------------------------
    def onStop(self):
        """停止策略（必须由用户继承实现）"""
        self.writeCtaLog(u'%s策略停止' %self.name)
        try:
            if self.myTask:
                self.myTask.stop()
        except Exception as e:
            print e
        self.putEvent()
    #----------------------------------------------------------------------
    def isTickValid(self, tick):
        """判断Tick是否有效"""
        def getTickTime(tick):
            """从Tick中取出Tick时间， 方便函数"""
            if tick is None:
                return dt.datetime(1970,1,1)
            tick_datetime_str = ' '.join([tick.date, tick.time])
            tick_datetime = None
        
            try:
                tick_datetime = dt.datetime.strptime(tick_datetime_str, '%Y%m%d %H:%M:%S.%f')
            except ValueError:
                try:
                    tick_datetime = dt.datetime.strptime(tick_datetime_str, '%Y-%m-%d %H:%M:%S')
                except ValueError:
                    tick_datetime = dt.datetime.strptime(tick.time, '%Y-%m-%dT%H:%M:%S.%f')

            return tick_datetime

        #汇率Tick
        if tick.vtSymbol == self.vtSymbols[2]:
            return True

        # tick 清洗
        tick_datetime = getTickTime(tick)        
        isTickValid = False
        # 比较当前 tick和 lastTick
        if tick.vtSymbol == self.vtSymbols[1]:
            if self.lastTick_active != None:
                time_delta = abs(tick_datetime - dt.datetime.now())
                if (0 <= time_delta.total_seconds() <= 120) and (tick.volume >= self.lastTick_active.volume) and tick.lastPrice > 0:
                    isTickValid = True
                    
        else:
            if self.lastTick_passive != None:
                time_delta = abs(dt.datetime.now() - tick_datetime)
                if (0 <= time_delta.total_seconds() <= 120) and (tick.volume >= self.lastTick_passive.volume) and tick.lastPrice > 0:
                    isTickValid = True

        # 保存 lastTick
        if tick.vtSymbol == self.vtSymbols[1]:
            self.lastTick_active = copy.copy(tick)
        else:
            self.lastTick_passive = copy.copy(tick)

        return isTickValid

    #-----------------------------------------------------------------------
    def onTick(self, tick):
        """收到行情TICK推送（必须由用户继承实现）"""
        print tick.vtSymbol[0:6], 
        if self.isTickValid(tick) == False:
            print u'滤除无效Tick: %s %s %s %d' % (tick.vtSymbol, tick.date, tick.time, tick.volume)
            return
        # 记录最新行情
        if tick.vtSymbol == self.vtSymbols[1]:
            self.data['lastTick_active'] = copy.copy(tick)
        elif tick.vtSymbol == self.vtSymbols[0]:
            self.data['lastTick_passive'] = copy.copy(tick)
        else:
            self.usd_cnh = tick.lastPrice
        # 更新状态机
        self.state.inState()

        # 重置data数据
        #self.reset_data()

    #----------------------------------------------------------------------
    def onBar(self, bar):
        """收到Bar推送（必须由用户继承实现）"""
        pass
        
    #----------------------------------------------------------------------
    def onOrder(self, order):
        """收到委托变化推送（必须由用户继承实现）"""
        print "onOrder(): orderTime = %r ; vtOrderID = %r" % (order.orderTime, order.vtOrderID)

        print order.status
        if order.status == STATUS_ALLTRADED:
            self.data[u'全部成交'] = True
        
        if order.status == STATUS_REJECTED:
            self.data[u'委托失败'] = True

        if order.status == STATUS_CANCELLED:
            self.data[u'已撤销'] = True

        self.state.inState()

        # 把 data中的有关成交的信息重设
        self.reset_data()
    #----------------------------------------------------------------------
    def onTrade(self, trade):
        if trade.price > 0:
            if trade.vtSymbol == self.vtSymbol_active:
                self.data['tradePrice_active'] = trade.price
            elif trade.vtSymbol == self.vtSymbol_passive:
                self.data['tradePrice_passive'] = trade.price

            self.__saveTradePrice__(self.data)

    #----------------------------------------------------------------------
    def __saveTradePrice__(self, data):
        """保存成交价格到文件"""
        try:
            with open(self.tradePriceFileName, 'w') as f:
                pair = {'tradePrice_active':data['tradePrice_active'], 'tradePrice_passive':data['tradePrice_passive']}
                d = json.dumps(pair)
                f.write(d)
        except:
            self.writeCtaLog('Exception:'+str(e))

    #----------------------------------------------------------------------
    def save_state(self, state, nested_state):
        """保存状态到文件"""
        try:
            d = {}
            if state.__class__ == EndState:
                state.__class__ = None
                nested_state.__class__ = UnknownState
            d['state_class'] = state.__class__
            d['nested_state_class'] = nested_state.__class__
            with open(self.stateFileName, 'w') as f:
                data = cPickle.dumps(d)
                f.write(data)
        except Exception as e:
            self.writeCtaLog('Exception: '+ str(e))
    #-----------------------------------------------------------------------
    def onTask(self, task_result):
        """Task 执行后的回调函数"""
        task_result_data = task_result.data
        if task_result.task_name == 'MyTask':
            # 更新回归模型
            if not task_result_data['Exception']:
                self.data['MyTask_result_data'] = task_result_data
            else:
                print u'统计计算发生异常，不更新回归模型'
            # 第一次运行
            self.data['MyTask_inited'] = task_result_data['inited']


    #------------------------------------------------------------------------
    def onBalance(self, balance):
        if balance.gatewayName == 'SHZD' and balance.frozenDeposit == 0.0:
            self.data['deposit_unfrozen'] = True