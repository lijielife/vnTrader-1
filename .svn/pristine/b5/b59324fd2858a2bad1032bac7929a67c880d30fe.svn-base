# encoding: UTF-8

"""
test
"""
from ctaBase import *
from ctaTemplate2 import CtaTemplate2
from vtConstant import *



########################################################################
class TestStrategy(CtaTemplate2):
    
    className = 'TestStrategy'
    author = u''
    #------------------------------------------------------------------------
    # 
    
    #------------------------------------------------------------------------
    # 策略参数

    #------------------------------------------------------------------------
    # 策略变量
    count = 0
    frozenDeposit = 0.0
    # 参数列表，保存了参数的名称
    paramList = ['name',
                 'className',
                 'author',
                 'vtSymbols'
                ]

    #----------------------------------------------------------------------
    def __init__(self, ctaEngine, setting):
        """Constructor"""
        super(TestStrategy, self).__init__(ctaEngine, setting)

        # 注意策略类中的可变对象属性（通常是list和dict等），在策略初始化时需要重新创建，
        # 否则会出现多个策略实例之间数据共享的情况，有可能导致潜在的策略逻辑错误风险，
        # 策略类中的这些可变对象属性可以选择不写，全都放在__init__下面，写主要是为了阅读
        # 策略时方便（更多是个编程习惯的选择）        


    #----------------------------------------------------------------------
    def onInit(self):
        """初始化策略（必须由用户继承实现）"""
        self.writeCtaLog(u'%s策略初始化' %self.name)

        self.putEvent()

    #----------------------------------------------------------------------
    def onStart(self):
        """启动策略（必须由用户继承实现）"""
        self.writeCtaLog(u'%s策略启动' %self.name)
        self.priceTick_active = self.getPriceTick(self.vtSymbols[1])
        self.vtSymbol_active = self.vtSymbols[1]

        self.cancelled = True
        self.putEvent()

    #----------------------------------------------------------------------
    def onStop(self):
        """停止策略（必须由用户继承实现）"""
        self.writeCtaLog(u'%s策略停止' %self.name)
        self.putEvent()

    
    #-----------------------------------------------------------------------
    def onTick(self, tick):
        """收到行情TICK推送（必须由用户继承实现）"""
        print tick.vtSymbol[0:6], tick.lastPrice
        if tick.vtSymbol == self.vtSymbol_active:
            orderPrice = tick.askPrice1 -20*self.priceTick_active
            
            if self.cancelled and self.count <3 and self.frozenDeposit == 0.0:
                self.count += 1
                self.sendOrder(self.vtSymbol_active,
                                        CTAORDER_BUY,
                                        orderPrice,
                                        1,
                                        False, False, True)
                self.cancelled = False
                self.frozenDeposit = 1.0

    #----------------------------------------------------------------------
    def onBar(self, bar):
        """收到Bar推送（必须由用户继承实现）"""
        pass
        

    #----------------------------------------------------------------------
    def onOrder(self, order):
        """收到委托变化推送（必须由用户继承实现）"""
        print "onOrder(): orderTime = %r ; vtOrderID = %r; status = %s" % (order.orderTime, order.vtOrderID, order.status)
        if order.status==STATUS_CANCELLED:
            self.cancelled = True

    #----------------------------------------------------------------------
    def onTrade(self, trade):
        print 'onTrade'


    def onBalance(self, balance):
        import pprint
        pprint.pprint(balance.__dict__)
        if balance.gatewayName == 'SHZD':
            self.frozenDeposit = balance.frozenDeposit

        
        